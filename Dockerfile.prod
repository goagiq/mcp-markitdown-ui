# Multi-stage production Dockerfile for MarkItDown with Vision OCR
# Stage 1: Base image with system dependencies
FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    gnupg \
    software-properties-common \
    build-essential \
    libpq-dev \
    libffi-dev \
    libssl-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libwebp-dev \
    libopenblas-dev \
    liblapack-dev \
    libatlas-base-dev \
    gfortran \
    pkg-config \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN groupadd -r markitdown && useradd -r -g markitdown markitdown

# Stage 2: Development dependencies
FROM base as development

# Install Python development dependencies
COPY requirements-dev.txt /tmp/requirements-dev.txt
RUN pip install --no-cache-dir -r /tmp/requirements-dev.txt

# Stage 3: Production dependencies
FROM base as production-deps

# Install Ollama
RUN curl -fsSL https://ollama.ai/install.sh | sh

# Copy and install Python dependencies
COPY packages/markitdown/pyproject.toml /tmp/markitdown/
COPY packages/markitdown-mcp-server/pyproject.toml /tmp/mcp-server/
COPY packages/markitdown-web-ui/pyproject.toml /tmp/web-ui/

# Install production dependencies
RUN pip install --no-cache-dir \
    markitdown[vision-ocr-advanced] \
    markitdown-mcp-server \
    markitdown-web-ui

# Stage 4: Application build
FROM production-deps as build

# Set working directory
WORKDIR /app

# Copy application code
COPY packages/markitdown/src/ /app/markitdown/src/
COPY packages/markitdown-mcp-server/src/ /app/mcp-server/src/
COPY packages/markitdown-web-ui/src/ /app/web-ui/src/

# Copy configuration files
COPY config/ /app/config/
COPY scripts/ /app/scripts/

# Create necessary directories
RUN mkdir -p /app/data/uploads \
    /app/data/models \
    /app/logs \
    /app/backups \
    /app/cache

# Set proper permissions
RUN chown -R markitdown:markitdown /app

# Stage 5: Production runtime
FROM production-deps as production

# Set working directory
WORKDIR /app

# Copy built application from build stage
COPY --from=build /app /app

# Copy startup scripts
COPY scripts/start-production.sh /app/start-production.sh
COPY scripts/health-check.sh /app/health-check.sh

# Make scripts executable
RUN chmod +x /app/start-production.sh /app/health-check.sh

# Create production configuration
COPY config/production/ /app/config/production/

# Set production environment variables
ENV NODE_ENV=production \
    PYTHONPATH=/app \
    MARKITDOWN_CONFIG=/app/config/production \
    MARKITDOWN_DATA=/app/data \
    MARKITDOWN_LOGS=/app/logs

# Switch to non-root user
USER markitdown

# Expose ports
EXPOSE 8000 8001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD /app/health-check.sh

# Default command
CMD ["/app/start-production.sh"]

# Stage 6: Security scanning (optional)
FROM production as security-scan

# Install security scanning tools
RUN apt-get update && apt-get install -y \
    trivy \
    bandit \
    safety \
    && rm -rf /var/lib/apt/lists/*

# Run security scans
RUN trivy filesystem --exit-code 1 --severity HIGH,CRITICAL /app
RUN bandit -r /app -f json -o /tmp/bandit-report.json
RUN safety check --json --output /tmp/safety-report.json

# Stage 7: Final production image
FROM production as final

# Copy security scan results (if needed)
COPY --from=security-scan /tmp/*.json /app/security-reports/

# Final security hardening
RUN apt-get update && apt-get install -y \
    apparmor \
    apparmor-utils \
    && rm -rf /var/lib/apt/lists/*

# Configure AppArmor profile
COPY security/apparmor/markitdown.profile /etc/apparmor.d/markitdown
RUN apparmor_parser -r /etc/apparmor.d/markitdown

# Set security labels
LABEL maintainer="MarkItDown Development Team" \
      version="1.0.0" \
      description="MarkItDown with Vision OCR - Production Image" \
      security.scan="true" \
      security.hardening="apparmor"

# Final user switch
USER markitdown

# Production entrypoint
ENTRYPOINT ["/app/start-production.sh"]
